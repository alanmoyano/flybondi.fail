---
export const prerender = false;

import Layout from "../layouts/Layout.astro";
import { formatDuration, intervalToDuration } from "date-fns";
import { es } from "date-fns/locale/es";
import airports from "../../../misc/aerolineas-airports.json";
import { tz } from "@date-fns/tz";
import dayjs from "dayjs";
import postgres from "postgres";

const { env } = Astro.locals.runtime;
export const sql = postgres(env.HYPERDRIVE.connectionString);

interface Flight {
  aerolineas_flight_id: string;
  last_updated: string;
  json: {
    id: string;
    mov: string;
    nro: string;
    arpt: string;
    stda: string;
    atda: string;
    matricula: string;
    aerolinea: string;
    idaerolinea: string;
    IATAdestorig: string;
  };
  matricula: string;
  aeronave: string;
  msn: string;
  compania_aerea: string;
  situacion: string;
  detail_url: string;
  edad_del_avion: number;
  config_de_asientos: string;
}
type Vuelo = Flight & { delta: number; atda: string; stda: string };

const tsz = "America/Argentina/Buenos_Aires";
const tzBS = tz(tsz);

const dateQ = Astro.url.searchParams.get("date");
const date = dateQ ? dayjs(dateQ).tz(tsz, true) : dayjs().tz(tsz);

const start = dayjs(date).startOf("day");
const end = dayjs(date).endOf("day");

console.log({ date, start, end });

const vuelos = await sql<Vuelo[]>`
WITH flight_data AS (
  SELECT *,
    (to_timestamp(json->>'stda' || ' ' || to_char(last_updated, 'YYYY'), 'DD/MM HH24:MI YYYY') AT TIME ZONE 'UTC' AT TIME ZONE 'America/Buenos_Aires') AS stda,
    CASE 
      WHEN LENGTH(json->>'atda') > 0 THEN (to_timestamp(json->>'atda' || ' ' || to_char(last_updated, 'YYYY'), 'DD/MM HH24:MI YYYY') AT TIME ZONE 'UTC' AT TIME ZONE 'America/Buenos_Aires')
    END AS atda
  FROM aerolineas_latest_flight_status
  left join airfleets_matriculas
  on matricula = json->>'matricula'
  WHERE json->>'idaerolinea' = 'FO' AND json->>'atda' != ''
)
SELECT
  *, CAST(EXTRACT(EPOCH FROM (atda - stda)) AS real) as delta
FROM flight_data
WHERE stda > ${start.toDate()} AND stda < ${end.toDate()};
`;

function delayString(vuelo: Vuelo) {
  const delayed = vuelo.delta > 0;
  const shorter = (s: string) =>
    s.replace(" horas", "hs").replace(" hora", "h").replace(" minutos", "min");
  if (delayed) {
    return shorter(
      "atrasado " +
        formatDuration(
          intervalToDuration({
            start: new Date(vuelo.stda),
            end: new Date(vuelo.atda),
          }),
          { locale: es }
        )
    );
  } else
    return shorter(
      "adelantado " +
        formatDuration(
          intervalToDuration({
            start: new Date(vuelo.atda),
            end: new Date(vuelo.stda),
          }),
          { locale: es }
        )
    );
}

const timeFormatter = Intl.DateTimeFormat("es-AR", {
  hour: "2-digit",
  minute: "2-digit",
  hour12: false,
});

const dateFormatter = Intl.DateTimeFormat("es-AR", {
  day: "2-digit",
  month: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
  hour12: false,
});

function formatDateTime(timestamp: string) {
  const dateObj = new Date(timestamp);
  return date.isSame(dateObj, "day")
    ? timeFormatter.format(dateObj)
    : dateFormatter.format(dateObj);
}

// TODO: tambien buscar aeropuertos que no son de aerolineas (USH, FLN, FTE, GIG)
const getAirport = (iata: string) => {
  const airport = airports.data.find((a) => a.iata === iata);
  return airport ? airport.alias : iata;
};

function getDelayColor(delay: number) {
  if (delay <= 0) return "text-green-600 dark:text-green-400";
  if (delay < 10 * 60) return "text-green-500 dark:text-green-400";
  if (delay < 60 * 60) return "text-yellow-600 dark:text-yellow-400";
  if (delay < 120 * 60) return "text-orange-600 dark:text-orange-400";
  return "text-red-600 dark:text-red-400";
}
---

<Layout>
  <h1>flybondi.fail</h1>
  <p>se vieneee</p>
  <div class="w-full max-w-[1000px]">
    <!-- Desktop Table View -->
    <table
      class="hidden md:table w-full bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden"
    >
      <thead class="bg-gray-200 dark:bg-gray-700">
        <tr>
          <th class="px-4 py-2 text-left text-gray-700 dark:text-gray-300"
            >Vuelo</th
          >
          <th class="px-4 py-2 text-left text-gray-700 dark:text-gray-300"
            >Ruta</th
          >
          <th class="px-4 py-2 text-left text-gray-700 dark:text-gray-300"
            >Hora Programada</th
          >
          <th class="px-4 py-2 text-left text-gray-700 dark:text-gray-300"
            >Hora Real</th
          >
          <th class="px-4 py-2 text-left text-gray-700 dark:text-gray-300"
            >Diferencia</th
          >
        </tr>
      </thead>
      <tbody>
        {
          vuelos.map((vuelo) => (
            <tr class="border-b border-gray-200 dark:border-gray-700">
              <td class="px-4 py-2 text-gray-900 dark:text-gray-100">
                {vuelo.json.nro}
              </td>
              <td class="px-4 py-2 text-gray-900 dark:text-gray-100">
                {getAirport(vuelo.json.arpt)} →{" "}
                {getAirport(vuelo.json.IATAdestorig)}
              </td>
              <td class="px-4 py-2 text-gray-900 dark:text-gray-100">
                {formatDateTime(vuelo.stda)}
              </td>
              <td class="px-4 py-2 text-gray-900 dark:text-gray-100">
                {formatDateTime(vuelo.atda)}
              </td>
              <td class={`px-4 py-2 font-bold ${getDelayColor(vuelo.delta)}`}>
                <span class="flex items-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 mr-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  {delayString(vuelo)}
                </span>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>

    <!-- Mobile Card View -->
    <div class="md:hidden grid gap-4 grid-cols-1 sm:grid-cols-2 p-4">
      {
        vuelos.map((vuelo) => (
          <div class="bg-neutral-50 dark:bg-gray-800 shadow rounded-lg px-4 py-3">
            <div class="flex justify-between items-center mb-2">
              <span class="text-lg font-bold text-gray-900 dark:text-gray-100">
                {vuelo.json.nro}
              </span>
              <span
                class={`font-bold ${getDelayColor(vuelo.delta)} flex items-center`}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 mr-1"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                {delayString(vuelo)}
              </span>
            </div>
            <div class="grid grid-cols-[auto_1fr] gap-2 text-sm">
              <div class="text-gray-600 dark:text-gray-400">Ruta:</div>
              <div class="text-gray-900 dark:text-gray-100">
                {getAirport(vuelo.json.arpt)} →{" "}
                {getAirport(vuelo.json.IATAdestorig)}
              </div>
              <div class="text-gray-600 dark:text-gray-400">Hora:</div>
              <div class="text-gray-900 dark:text-gray-100">
                <del>{formatDateTime(vuelo.stda)}</del>{" "}
                {formatDateTime(vuelo.atda)}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>
